/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default 		Euler;
}

gradSchemes
{
    grad(Arp1)         Gauss linear;
    grad(Arm)         Gauss linear;
    grad(Ar)         Gauss linear;
    grad(electron)         Gauss linear;
    grad(N_electron)         Gauss linear;
    grad(T_electron)         Gauss linear;
    grad((KBE*N_electron))         Gauss linear;
    grad((KBE*N_Arp1))      Gauss linear;
    grad(T_Arp1)         Gauss linear;
    grad(N_Arp1)         Gauss linear;
    grad(Te)         Gauss linear;
    grad(Phi)        Gauss linear orthogonal;
}

divSchemes
{
    default         none;
	div(F,Ni)	Gauss limitedLinear 1;
	div((interpolate(eeFlux)&S),Te)  Gauss limitedLinear 1;
	div(F_electron)	Gauss linear;
}

laplacianSchemes
{
    default         none;
	laplacian(eps,Phi)	Gauss linear orthogonal;
	laplacian(eps0,Phi)	Gauss linear orthogonal;
	laplacian(D,Ni)	Gauss linear orthogonal;
	laplacian(eC,Te)	Gauss linear orthogonal;
	laplacian(D,T)	Gauss linear orthogonal;
	laplacian(D,Nin)	Gauss linear orthogonal;
}

interpolationSchemes
{
    default                linear;
}

snGradSchemes
{
    default         linear;
    grad(Phi)       Gauss linear orthogonal;
}

fluxRequired
{
    default         no;
}

// ************************************************************************* //
